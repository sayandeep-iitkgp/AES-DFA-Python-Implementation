import sys

class AES:
	def __init__(self, key=None):
		
		# Constants
		self.Nk = 4
		self.Nb = 4
		self.Nr = 10 
		
		# S-Box	
		self.sbox = [ 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 
		0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 
		0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 
		0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 
		0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 
		0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 
		0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 
		0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 
		0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 
		0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 
		0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 
		0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 
		0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 
		0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 
		0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 
		0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 ]
		#
		# Inverse S-Box
		self.sbox_inv = [82,   9, 106, 213,  48,  54, 165,  56, 191,  64, 163, 158, 129, 243, 215, 251, 
		124, 227,  57, 130, 155,  47, 255, 135,  52, 142,  67,  68, 196, 222, 233, 203, 
		84, 123, 148,  50, 166, 194,  35,  61, 238,  76, 149,  11,  66, 250, 195,  78, 
		8,  46, 161, 102,  40, 217,  36, 178, 118,  91, 162,  73, 109, 139, 209,  37, 
		114, 248, 246, 100, 134, 104, 152,  22, 212, 164,  92, 204,  93, 101, 182, 146, 
		108, 112,  72,  80, 253, 237, 185, 218,  94,  21,  70,  87, 167, 141, 157, 132, 
		144, 216, 171,   0, 140, 188, 211,  10, 247, 228,  88,   5, 184, 179,  69,   6, 
		208,  44,  30, 143, 202,  63,  15,   2, 193, 175, 189,   3,   1,  19, 138, 107, 
		58, 145,  17,  65,  79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 
		150, 172, 116,  34, 231, 173,  53, 133, 226, 249,  55, 232,  28, 117, 223, 110, 
		71, 241,  26, 113,  29,  41, 197, 137, 111, 183,  98,  14, 170,  24, 190,  27, 
		252,  86,  62,  75, 198, 210, 121,  32, 154, 219, 192, 254, 120, 205,  90, 244, 
		31, 221, 168,  51, 136,   7, 199,  49, 177,  18,  16,  89,  39, 128, 236,  95, 
		96,  81, 127, 169,  25, 181,  74,  13,  45, 229, 122, 159, 147, 201, 156, 239, 
		160, 224,  59,  77, 174,  42, 245, 176, 200, 235, 187,  60, 131,  83, 153,  97, 
		23,  43,   4, 126, 186, 119, 214,  38, 225, 105,  20,  99,  85,  33,  12, 125]
		
		#
		# Round Constants
		self.Rcon = [0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 
		0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
		0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 
		0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 
		0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 
		0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 
		0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 
		0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 
		0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 
		0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 
		0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 
		0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 
		0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 
		0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 
		0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 
		0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb ]
		
		# Data Structures
		self.RoundKey = [0]*240
		self.Key = [0]*16
		self.state = [ [0]*4 for i in range(4)]
		self.ciphertext = [0]*16
		
		# Load the key af available
		if key is not None:
			for i in range(self.Nk*4):
				self.Key[i] = key[i]
		else:							#default key
			#self.Key = [0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c]
			self.Key = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]		
	
	def new_generator(self):
		return AES()

	# Key Expansion
	def KeyExpansion(self):
		
		temp = [0]*4	
		# The first round key is the key itself.
		for i in range(self.Nk):
			self.RoundKey[i*4 + 0] = self.Key[i*4 + 0]
			self.RoundKey[i*4 + 1] = self.Key[i*4 + 1]
			self.RoundKey[i*4 + 2] = self.Key[i*4 + 2]
			self.RoundKey[i*4 + 3] = self.Key[i*4 + 3]
		i = i + 1
		
		#All other round keys are found from the previous round keys.
		while (i < (self.Nb * (self.Nr+1))):
			for j in range(4):
				temp[j]=self.RoundKey[(i-1) * 4 + j]	
			if (i % self.Nk == 0):
				
				#This function rotates the 4 bytes in a word to the left once.
				#[a0,a1,a2,a3] becomes [a1,a2,a3,a0]				
				# Function RotWord()
				k = temp[0]
				temp[0] = temp[1]
				temp[1] = temp[2]
				temp[2] = temp[3]
				temp[3] = k	
				
				# SubWord() is a function that takes a four-byte input word and 
				#applies the S-box to each of the four bytes to produce an output word.

				# Function Subword()				
				temp[0] = self.sbox[temp[0]]
				temp[1] = self.sbox[temp[1]]
				temp[2] = self.sbox[temp[2]]
				temp[3] = self.sbox[temp[3]]
				
				temp[0] =  temp[0] ^ self.Rcon[int(i/self.Nk)]
			elif (self.Nk > 6 and i % self.Nk == 4): 
				# Function Subword()
				temp[0] = self.sbox[temp[0]]
				temp[1] = self.sbox[temp[1]]
				temp[2] = self.sbox[temp[2]]
				temp[3] = self.sbox[temp[3]]
				
			self.RoundKey[i*4+0] = self.RoundKey[(i-self.Nk)*4+0] ^ temp[0]
			self.RoundKey[i*4+1] = self.RoundKey[(i-self.Nk)*4+1] ^ temp[1]
			self.RoundKey[i*4+2] = self.RoundKey[(i-self.Nk)*4+2] ^ temp[2]
			self.RoundKey[i*4+3] = self.RoundKey[(i-self.Nk)*4+3] ^ temp[3]
			i = i + 1							
	
	# XOR the round keys with the state
	def AddRoundKey(self, rnd):
		for i in range(4):
			for j in range(4):
				self.state[j][i] = self.state[j][i] ^ self.RoundKey[rnd * self.Nb * 4 + i * self.Nb + j]
	
	# Perform S-Box computation over the state
	def SubBytes(self):
		for i in range(4):
			for j in range(4):
				self.state[i][j] = self.sbox[self.state[i][j]]

	# Perform ShiftRows
	def ShiftRows(self):
		
		# Rotate first row 1 columns to left	
		temp = self.state[1][0]
		self.state[1][0] = self.state[1][1]
		self.state[1][1] = self.state[1][2]
		self.state[1][2] = self.state[1][3]
		self.state[1][3] = temp

		# Rotate second row 2 columns to left	
		temp = self.state[2][0]
		self.state[2][0] = self.state[2][2]
		self.state[2][2] = temp

		temp = self.state[2][1]
		self.state[2][1] = self.state[2][3]
		self.state[2][3] = temp

		# Rotate third row 3 columns to left
		temp = self.state[3][0]
		self.state[3][0] = self.state[3][3]
		self.state[3][3] = self.state[3][2]
		self.state[3][2] = self.state[3][1]
		self.state[3][1] = temp
	
	# An utility function for computing 02*x in AES finite field
	def xtime(self, x):
		tmp1 = x<<1
		tmp1 = tmp1&0xff
		tmp2 = x>>7
		tmp2 = tmp2&1
		tmp2 = tmp2*0x1b
		val = tmp1^tmp2
		return val 	
	
	# MixColumns Function
	def MixColumns(self):
		for i in range(4):
			t = self.state[0][i]
			Tmp = self.state[0][i] ^ self.state[1][i] ^ self.state[2][i] ^ self.state[3][i]
			Tm = self.state[0][i] ^ self.state[1][i] ; 
			Tm = self.xtime(Tm) 
			self.state[0][i] = self.state[0][i] ^ Tm ^ Tmp
			
			Tm = self.state[1][i] ^ self.state[2][i] 
			Tm = self.xtime(Tm)
			self.state[1][i] = self.state[1][i] ^ Tm ^ Tmp
			
			Tm = self.state[2][i] ^ self.state[3][i]
			Tm = self.xtime(Tm)
			self.state[2][i] = self.state[2][i] ^ Tm ^ Tmp
			
			Tm = self.state[3][i] ^ t 
			Tm = self.xtime(Tm)
			self.state[3][i] = self.state[3][i] ^ Tm ^ Tmp

	# Utility: get the last round key
	def get_lastroundkey(self):
		last_roundkey = []
		rnd = 10
		for i in range(4):
			for j in range(4):
				last_roundkey.append(self.RoundKey[rnd * self.Nb * 4 + i * self.Nb + j])
		return last_roundkey		
				
	# AES Encryption				
	def encrypt(self, pt=None):
		if pt is None:
			pt = [0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff]
		for i in range(4):
			for j in range(4):
				self.state[j][i] = pt[i*4 + j]
		rnd = 0
		self.AddRoundKey(rnd)
		
		for rnd in range(1, self.Nr):
			self.SubBytes()
			self.ShiftRows()
			self.MixColumns()
			self.AddRoundKey(rnd)
		self.SubBytes()
		self.ShiftRows()
		self.AddRoundKey(self.Nr)
		
		for i in range(4):
			for j in range(4):
				self.ciphertext[i*4 + j] = self.state[j][i]
		
		return self.ciphertext		

def pause():
	programPause = input("Press the <ENTER> key to continue...")

# Printing a list of integers in formatted hex
def print_list_hex(l):
	for i in l:
		print('0x%0*x' % (2,i), end = " ")
	print("")

# Utility: convert an interger array to a hex string (arr len must be a multiple of 4)
def intarraytohexstring(l):
	hexstr = ''.join('{:02x}'.format(x) for x in l)
	return hexstr

# Utility: convert a hex string to an integer array (str len must be a multiple of 4)
def hexstringtointarray(l):
	l_lst = [l[i:i+2] for i in range(0, len(l), 2)]
	l_int = [int(t, 16) for t in l_lst]
	return l_int

# Utility: Finds out the correct byte location after shiftrow operation	
def target_byte_mapper(target_byte):
	byte_map = [0, 5, 10, 15, 4, 9, 14, 3, 8, 13, 2, 7, 12, 1, 6, 11]	
	return byte_map[target_byte]
